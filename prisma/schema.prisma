generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  user
  admin
  super_admin
}

enum DeviceStatus {
  available
  rented
  under_maintenance
}

enum RentalStatus {
  pending
  confirmed
  completed
  canceled
}

enum Duration {
  day
  week
  month
}

enum PaymentType {
  default
  paypal
}

enum SupportIssueType {
  general
  rental_problem
  damage_report
}

enum SupportStatus {
  pending
  resolved
}

enum NotificationStatus {
  unread
  read
}

enum MaintenanceStatus {
  pending
  completed
}

enum DamageReportStatus {
  pending
  in_progress
  resolved
  canceled
}

enum IdentityDocStatus {
  verified
  rejected
}

// Người dùng
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)

  identityDoc String?
  phoneNumber String?
  dateOfBirth DateTime?
  avatar      String?
  gender      String?

  statusIdentityDoc IdentityDocStatus?

  rentals        Rental[]
  feedbacks      Feedback[]
  cart           Cart?
  notifications  Notification[]
  paymentMethods PaymentMethod[]
  supports       Support[]
  damageReports  DamageReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Danh mục thiết bị
model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?

  equipments Equipment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

// Thiết bị
model Equipment {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  image       String
  description String
  basePrice   Float
  rentalPrice Float
  stock       Int

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  cartItems     CartItem[]
  rentalItems   RentalItem[]
  packages      EquipmentPackageOnEquipment[]
  maintenances  Maintenance[]
  damageReports DamageReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("equipments")
}

// Gói thiết bị
model EquipmentPackage {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  basePrice   Float
  rentalPrice Float
  image       String

  equipments  EquipmentPackageOnEquipment[]
  cartItems   CartItem[]
  rentalItems RentalItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("equipment_packages")
}

// Bảng trung gian giữa Equipment và EquipmentPackage
model EquipmentPackageOnEquipment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  equipmentId String    @db.ObjectId
  equipment   Equipment @relation(fields: [equipmentId], references: [id])

  packageId String           @db.ObjectId
  package   EquipmentPackage @relation(fields: [packageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("equipment_package_on_equipment")
}

// Giỏ hàng
model Cart {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  items CartItem[]

  totalAmount Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

// Mục trong giỏ hàng
model CartItem {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  cartId String @db.ObjectId
  cart   Cart   @relation(fields: [cartId], references: [id])

  equipmentId String?    @db.ObjectId
  equipment   Equipment? @relation(fields: [equipmentId], references: [id])

  packageId String?           @db.ObjectId
  package   EquipmentPackage? @relation(fields: [packageId], references: [id])

  quantity Int
  price    Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

// Thuê thiết bị
model Rental {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  items       RentalItem[]
  totalAmount Float?
  startDate   DateTime?
  endDate     DateTime?
  status      RentalStatus @default(pending)
  address     String?

  feedbacks Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rentals")
}

// Mục thuê thiết bị
model RentalItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  rentalId String @db.ObjectId
  rental   Rental @relation(fields: [rentalId], references: [id])

  equipmentId String?    @db.ObjectId
  equipment   Equipment? @relation(fields: [equipmentId], references: [id])

  packageId String?           @db.ObjectId
  package   EquipmentPackage? @relation(fields: [packageId], references: [id])

  quantity      Int
  durationType  Duration
  durationValue Int
  price         Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rental_items")
}

// Chính sách
model Policy {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  description         String
  depositRate         Float // tỷ lệ đặt cọc
  damageProcessingFee Float // phí xử lý hỏng hóc

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("policies")
}

// Phản hồi
model Feedback {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  rating        Int // đánh giá từ 1 đến 5
  comment       String?
  adminResponse String? // phản hồi từ admin
  replyDate     DateTime? // ngày phản hồi

  userId   String @db.ObjectId
  rentalId String @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  rental Rental @relation(fields: [rentalId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feedbacks")
}

// Bảo trì
model Maintenance {
  id                       String            @id @default(auto()) @map("_id") @db.ObjectId
  maintenanceDate          DateTime
  description              String?
  suggestedNextMaintenance DateTime? // đề xuất lần bảo trì tiếp theo
  status                   MaintenanceStatus @default(pending)
  maintenanceCost          Float? // chi phí bảo trì

  equipmentId String    @db.ObjectId
  equipment   Equipment @relation(fields: [equipmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("maintenances")
}

// Thông báo
model Notification {
  id      String             @id @default(auto()) @map("_id") @db.ObjectId
  message String
  status  NotificationStatus @default(unread)

  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

// Mã giảm giá
model Discount {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  code         String   @unique
  discountRate Float // phần trăm giảm giá
  validFrom    DateTime
  validTo      DateTime
  maxUsage     Int // số lần mã có thể sử dụng
  currentUsage Int?     @default(0)
  isActive     Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("discounts")
}

// Phương thức thanh toán
model PaymentMethod {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  methodType PaymentType
  totalPrice Float

  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payment_methods")
}

// Hỗ trợ
model Support {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  issueType   SupportIssueType
  description String
  status      SupportStatus    @default(pending)

  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("supports")
}

// Báo hỏng thiết bị
model DamageReport {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  description String // Mô tả về hư hỏng
  damageDate  DateTime           @default(now())
  status      DamageReportStatus @default(pending)
  image       String

  equipmentId String    @db.ObjectId // Thiết bị bị hỏng
  equipment   Equipment @relation(fields: [equipmentId], references: [id])

  userId String @db.ObjectId // Người báo hỏng
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("damage_reports")
}
