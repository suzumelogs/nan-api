// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  user
  admin
  super_admin
}

enum RentalStatus {
  pending
  completed
  cancelled
}

enum DeviceStatus {
  available
  unavailable
  under_maintenance
}

// Người dùng
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  identityDoc   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deposits       Deposit[]
  rentals        Rental[]
  rentalOrders   RentalOrder[]
  feedbacks      Feedback[]
  notifications  Notification[]
  repairReports  RepairReport[]
  supportTickets SupportTicket[]

  @@map("users")
}

// Khoản đặt cọc
model Deposit {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @map("userId") @db.ObjectId
  amount Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("deposits")
}

//  Lịch sử cho thuê
model Rental {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  userId        String       @map("userId") @db.ObjectId
  deviceId      String       @map("deviceId") @db.ObjectId
  rentalPeriod  Int
  totalAmount   Float
  depositAmount Float
  rentalStatus  RentalStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  device Device @relation(fields: [deviceId], references: [id])

  @@map("rentals")
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  devices Device[]

  @@map("categories")
}

model Device {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  categoryId     String       @map("categoryId") @db.ObjectId
  rentalOrderId  String?      @map("rentalOrderId") @db.ObjectId
  pricePerDay    Float
  pricePerWeek   Float
  pricePerMonth  Float
  status         DeviceStatus
  warrantyPeriod Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  maintenanceHistories MaintenanceRecord[]
  rentals              Rental[]
  feedbacks            Feedback[]

  category     Category       @relation(fields: [categoryId], references: [id])
  rentalOrder  RentalOrder?   @relation(fields: [rentalOrderId], references: [id])
  RepairReport RepairReport[]

  @@map("devices")
}

model MaintenanceRecord {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  deviceId        String   @map("deviceId") @db.ObjectId
  maintenanceDate DateTime
  maintenanceType String
  notes           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  device Device @relation(fields: [deviceId], references: [id])

  @@map("maintenance_records")
}

model RentalOrder {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                String   @map("userId") @db.ObjectId
  deviceIds             String[]
  totalRentalAmount     Float
  totalDeposit          Float
  rentalPeriod          Int
  paymentMethod         String
  rentalStatus          String
  confirmationDocuments String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  devices Device[]

  @@map("rental_orders")
}

model Feedback {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @map("userId") @db.ObjectId
  deviceId String @map("deviceId") @db.ObjectId
  rating   Int
  comment  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  device Device @relation(fields: [deviceId], references: [id])
}

model DiscountCode {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  code          String   @unique
  discountValue Float
  startDate     DateTime
  endDate       DateTime
  usageLimit    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  userId  String  @map("userId") @db.ObjectId
  message String
  isRead  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model RepairReport {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @map("userId") @db.ObjectId
  deviceId    String   @map("deviceId") @db.ObjectId
  reportDate  DateTime
  description String
  status      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  device Device @relation(fields: [deviceId], references: [id])
}

model FAQ {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  question String
  answer   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SupportTicket {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @map("userId") @db.ObjectId
  issueDescription String
  status           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
