// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  user
  admin
  super_admin
}

enum DeviceStatus {
  available
  rented
  under_maintenance
}

enum PackageStatus {
  available
  rented
  under_maintenance
}

enum RentalStatus {
  pending
  confirmed
  completed
  canceled
}

enum PaymentType {
  credit_card
  bank_transfer
  paypal
}

enum SupportIssueType {
  general
  rental_problem
  damage_report
}

enum SupportStatus {
  pending
  resolved
}

enum NotificationStatus {
  unread
  read
}

enum MaintenanceStatus {
  pending
  completed
}

// Người dùng
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  identityDoc   String?

  rentals        Rental[]        @relation("UserRentals")
  feedbacks      Feedback[]      @relation("UserFeedbacks")
  cart           Cart?           @relation("UserCart")
  notifications  Notification[]  @relation("UserNotifications")
  paymentMethods PaymentMethod[] @relation("UserPaymentMethods")
  supports       Support[]       @relation("UserSupports")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Danh mục
model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?

  devices Device[] @relation("CategoryDevices")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

// Thiết bị
model Device {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String

  priceDay   Float?
  priceWeek  Float?
  priceMonth Float?

  quantity Int @default(1)

  status DeviceStatus @default(available)

  categoryId String   @db.ObjectId
  category   Category @relation("CategoryDevices", fields: [categoryId], references: [id])

  rentals            Rental[]      @relation("DeviceRentals")
  maintenanceRecords Maintenance[] @relation("DeviceMaintenanceRecords")

  cartItems CartItem[] @relation("CartDeviceItems")
  packageId String?    @db.ObjectId
  package   Package?   @relation("DevicePackages", fields: [packageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("devices")
}

// Gói
model Package {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String

  priceDay   Float?
  priceWeek  Float?
  priceMonth Float?

  quantity Int @default(1)

  status PackageStatus @default(available)

  devices Device[] @relation("DevicePackages")

  rentals Rental[] @relation("PackageRentals")

  cartItems CartItem[] @relation("CartPackageItems")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("packages")
}

// Giỏ hàng
model Cart {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique @db.ObjectId
  user   User   @relation("UserCart", fields: [userId], references: [id])

  cartItems CartItem[] @relation("CartItems")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

// Mục trong giỏ hàng
model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int     @default(1)
  cartId    String  @db.ObjectId
  deviceId  String? @db.ObjectId
  packageId String? @db.ObjectId

  cart    Cart     @relation("CartItems", fields: [cartId], references: [id])
  device  Device?  @relation("CartDeviceItems", fields: [deviceId], references: [id])
  package Package? @relation("CartPackageItems", fields: [packageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

// Thuê
model Rental {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  rentalStartDate DateTime
  rentalEndDate   DateTime
  totalPrice      Float
  depositAmount   Float
  damageFee       Float? // phí hỏng hóc nếu có
  status          RentalStatus @default(pending)

  userId    String  @db.ObjectId
  deviceId  String? @db.ObjectId // Nếu thuê từng thiết bị
  packageId String? @db.ObjectId // Nếu thuê theo gói

  user    User     @relation("UserRentals", fields: [userId], references: [id])
  device  Device?  @relation("DeviceRentals", fields: [deviceId], references: [id])
  package Package? @relation("PackageRentals", fields: [packageId], references: [id])

  feedbacks Feedback[] @relation("RentalFeedbacks")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rentals")
}

// Chính sách
model Policy {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  description         String
  depositRate         Float // tỷ lệ đặt cọc
  damageProcessingFee Float // phí xử lý hỏng hóc

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("policies")
}

// Phản hồi
model Feedback {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  rating        Int // đánh giá từ 1 đến 5
  comment       String?
  adminResponse String? // phản hồi từ admin
  replyDate     DateTime? // ngày phản hồi

  userId   String @db.ObjectId
  rentalId String @db.ObjectId

  user   User   @relation("UserFeedbacks", fields: [userId], references: [id])
  rental Rental @relation("RentalFeedbacks", fields: [rentalId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feedbacks")
}

// Bảo trì
model Maintenance {
  id                       String            @id @default(auto()) @map("_id") @db.ObjectId
  maintenanceDate          DateTime
  description              String?
  suggestedNextMaintenance DateTime? // đề xuất lần bảo trì tiếp theo
  status                   MaintenanceStatus @default(pending)
  maintenanceCost          Float? // chi phí bảo trì

  deviceId String @db.ObjectId

  device Device @relation("DeviceMaintenanceRecords", fields: [deviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("maintenances")
}

// Thông báo
model Notification {
  id      String             @id @default(auto()) @map("_id") @db.ObjectId
  message String
  status  NotificationStatus @default(unread)

  userId String @db.ObjectId

  user User @relation("UserNotifications", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

// Mã giảm giá
model Discount {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  code         String   @unique
  discountRate Float // phần trăm giảm giá
  validFrom    DateTime
  validTo      DateTime
  maxUsage     Int // số lần mã có thể sử dụng
  currentUsage Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("discounts")
}

// Phương thức thanh toán
model PaymentMethod {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  methodType PaymentType
  details    String // chi tiết phương thức thanh toán

  userId String @db.ObjectId

  user User @relation("UserPaymentMethods", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payment_methods")
}

// Hỗ trợ
model Support {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  issueType   SupportIssueType
  description String
  status      SupportStatus    @default(pending)

  userId String @db.ObjectId

  user User @relation("UserSupports", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("supports")
}
