// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  user
  admin
  super_admin
}

enum DeviceStatus {
  available
  rented
  under_maintenance
}

enum RentalStatus {
  pending
  confirmed
  completed
  canceled
}

enum PaymentType {
  credit_card
  bank_transfer
  paypal
}

enum SupportIssueType {
  general
  rental_problem
  damage_report
}

enum SupportStatus {
  pending
  resolved
}

enum NotificationStatus {
  unread
  read
}

enum MaintenanceStatus {
  pending
  completed
}

// User information
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  identityDoc   String? // Tài liệu nhận dạng (CCCD/CMND)

  rentals        Rental[]
  feedbacks      Feedback[]
  carts          Cart[]
  notifications  Notification[]
  paymentMethods PaymentMethod[]
  supports       Support[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Device information
model Device {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String
  priceDay    Float
  priceWeek   Float
  priceMonth  Float
  status      DeviceStatus @default(available)

  categoryId String  @db.ObjectId
  cartId     String? @db.ObjectId

  category Category @relation(fields: [categoryId], references: [id])
  cart     Cart?    @relation(fields: [cartId], references: [id])

  rentals            Rental[]
  maintenanceRecords Maintenance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("devices")
}

// Category for devices or rental packages
model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?

  devices Device[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

// Rental details
model Rental {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  rentalStartDate DateTime
  rentalEndDate   DateTime
  totalPrice      Float
  depositAmount   Float
  damageFee       Float? // phí hỏng hóc nếu có
  status          RentalStatus @default(pending)

  userId   String @db.ObjectId
  deviceId String @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  device Device @relation(fields: [deviceId], references: [id])

  feedbacks Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rentals")
}

// Cart details
model Cart {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  rentalDuration Int // thời gian thuê
  totalPrice     Float // tổng giá đã tính toán

  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id])

  devices Device[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

// Policies for deposits and damages
model Policy {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  description         String
  depositRate         Float // tỷ lệ đặt cọc
  damageProcessingFee Float // phí xử lý hỏng hóc

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("policies")
}

// Feedback details
model Feedback {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  rating        Int // đánh giá từ 1 đến 5
  comment       String?
  adminResponse String? // phản hồi từ admin

  userId   String @db.ObjectId
  rentalId String @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  rental Rental @relation(fields: [rentalId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feedbacks")
}

// Maintenance records for each device
model Maintenance {
  id                       String            @id @default(auto()) @map("_id") @db.ObjectId
  maintenanceDate          DateTime
  description              String?
  suggestedNextMaintenance DateTime? // đề xuất lần bảo trì tiếp theo
  status                   MaintenanceStatus @default(pending)

  deviceId String @db.ObjectId

  device Device @relation(fields: [deviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("maintenances")
}

// Notifications for system events
model Notification {
  id      String             @id @default(auto()) @map("_id") @db.ObjectId
  message String
  status  NotificationStatus @default(unread)

  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

// Discount codes for promotions
model Discount {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  code         String   @unique
  discountRate Float // phần trăm giảm giá
  validFrom    DateTime
  validTo      DateTime
  maxUsage     Int // số lần mã có thể sử dụng
  currentUsage Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("discounts")
}

// Payment methods for users
model PaymentMethod {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  methodType PaymentType
  details    String // chi tiết phương thức thanh toán

  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payment_methods")
}

// Support requests from users
model Support {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  issueType   SupportIssueType
  description String
  status      SupportStatus    @default(pending)

  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("supports")
}
